package me.modedesign.create.factorymethod.leifeng;

//测试类
public class Main {
	public static void main(String[] args) {
		
		
		
		
		/*
		 * 这里好好想想工厂方法和简单工厂的区别
		 * 
		 * 
		 * 
		 * 简单工厂：简单工厂中主要是   			将创建对象的行为放到了工厂中！！！！！！！，因此我们添加新的对象的话，就需要在工厂中修改逻辑代码
		 * 就是说 工程中仅有一个工厂，任何对象都是从工厂中创造，因此我们不需要管理对象，只需要将对象交给工厂就可以。
		 * 
		 * 
		 * 工厂方法：工厂方法就是					存在多个工厂对象，每个工厂对象产生特定的对象，但是我们对所有的工厂对象有一个抽象的接口，这里我们
		 * 用到了多态，因此我们调用工厂接口，剩下的就是实现什么工厂，业务逻辑中就调用的就是什么工厂创建什么对象执行什么逻辑
		 * 
		 * 
		 * 抽象工厂方法：      就是将我们的 一系列，行为抽象到工厂方法中！！！     ----------------------针对产品族！！！！！！！！！一系列产品
		 * 
		 * 简单工厂，可以生产同一等级结构中的任意产品。             	对增加新产品无能为力
		 * 工厂方法，可以生产同一等级结构中的固定产品。			支持增加任意产品
		 * 抽象工厂，可以生产不同产品族的全部产品。					对增加新产品无能为力，支持增加产品族
		 * 
		 * 
		 * 
		 * 我们还可以通过反射来动态修改这里，是不是超级的强！
		 */
		IFactory factory = new UnderGraduateFactory();
		
		//这里更换new的工厂事例，下面的代码就不需要修改，这样子代码修改率极大的降低
		LeiFeng leiFeng =  factory.createLeiFeng();
		leiFeng.sweep();
		leiFeng.wash();
		leiFeng.buyRice();
	}
}
